#!/usr/bin/perl -w

use strict;
#use diagnostics;
#
# how does this differ from perl -w ?
#use warnings;
 
use LWP::UserAgent;
use Getopt::Std;
use Time::Local;
use POSIX qw(strtod);

use vars qw ($USAGE $VERSION $opt_h $opt_H $opt_V $opt_p $opt_u $opt_w $opt_c);
use vars qw ($warn_time $crit_time $start_epoch $latency $eval_result %MoY);
use subs qw (convert_to_epoch nagios_unknown nagios_critical nagios_warning nagios_ok);

$VERSION="0.2 10-Jul-2007";

%MoY = ('Jan' => 0, 'Feb' => 1, 'Mar' => 2, 'Apr' => 3, 'May' => 4,  'Jun' => 5,
        'Jul' => 6, 'Aug' => 7, 'Sep' => 8, 'Oct' => 9, 'Nov' => 10, 'Dec' => 11, );

sub getnum {
    my $str = shift;
    $str =~ s/^\s+//;
    $str =~ s/\s+$//;
    $! = 0;
    my($num, $unparsed) = strtod($str);
    if (($str eq '') || ($unparsed != 0) || $!) {
        return;
    } else {
        return $num;
    }
}

###########################################################
# @arg time in format Thu, 21 Jun 2007 14:01:35 GMT
# @return seconds since epoch
###########################################################
sub convert_to_epoch {
    my $arg = shift;
    my ($sec, $min, $hours, $mday, $_moy, $mon, $year, $hhmmss, $junk, $junk2);
    ($junk, $mday, $_moy, $year, $hhmmss, $junk2) = split(' ', $arg);
    $mon = $MoY{$_moy};
    ($hours, $min, $sec) = split (':', $hhmmss);
    return timegm($sec, $min, $hours, $mday, $mon, $year);
}

###########################################################
# helpers for returning plugin results to nagios
###########################################################
sub nagios_unknown {
    my $errmsg = shift;
    print STDOUT "ACA-LATENCY UNKNOWN: ", $errmsg, "\n";
    exit 3;
}

sub nagios_critical {
    my $errmsg = shift;
    my $latency = shift;
    my $perfdata = ( defined($latency) ? " ${latency}s for [${opt_u}] | latency=${latency}s,url=${opt_u}" : "" );
    print STDOUT "ACA-LATENCY CRITICAL: ", $errmsg, $perfdata, "\n";
    exit 2;
}

sub nagios_warning {
    my $errmsg = shift;
    my $latency = shift;
    my $perfdata = ( defined($latency) ? " ${latency}s for [${opt_u}] | latency=${latency}s,url=${opt_u}" : "" );
    print STDOUT "ACA-LATENCY WARNING: ", $errmsg, $perfdata, "\n";
    exit 1;
}

sub nagios_ok {
    my $ok_msg = shift;
    my $latency = shift;
    my $perfdata = ( defined($latency) ? " ${latency}s for [${opt_u}] | latency=${latency}s,url=${opt_u}" : "" );
    print STDOUT "ACA-LATENCY ok: ", $ok_msg, $perfdata, "\n";
    exit 0;
}

###########################################################
# USAGE
#  returns nagios ret codes:
#    0 OK
#    1 WARNING
#    2 CRITICAL
#    3 UNKNOWN (internal error)
###########################################################
$USAGE = <<EOUSAGE;
Usage: check_aca_latency -H host -p port -u content_url -w warn_timeout -c crit_timeout
      example: check_aca_latency -H vfuk.p1.novarra.co.uk -p 80 -u www.google.co.uk -w 5 -c 10  
EOUSAGE

###########################################################
# parse cmd line
###########################################################
getopts('hH:p:u:w:c:V');
if ($opt_V) { print "$0 ${VERSION}\n"; exit 0; }
if ($opt_h) { print "${USAGE}\n";      exit 0; }
nagios_unknown                      "Missing host param\n$USAGE" unless $opt_H;
nagios_unknown                      "Missing port param\n$USAGE" unless $opt_p;
nagios_unknown                       "Missing url param\n$USAGE" unless $opt_u;
nagios_unknown              "Missing warn_timeout param\n$USAGE" unless $opt_w;
nagios_unknown "Non-numeric warn_timeout param [$opt_w]\n$USAGE" unless $warn_time = getnum $opt_w ;
nagios_unknown              "Missing crit_timeout param\n$USAGE" unless $opt_c;
nagios_unknown "Non-numeric crit_timeout param [$opt_c]\n$USAGE" unless $crit_time = getnum $opt_c ;
nagios_unknown             "crit_timeout < warn_timeout\n$USAGE" if ($crit_time < $warn_time);

###########################################################
# build ua and request
#
# THIS IS THE STUFF YOU'LL WANT TO CHANGE FOR DIFFERENT
# ACA DEPLOYMENTS
#
###########################################################
my $proxy="http://${opt_H}:${opt_p}";
$opt_u = ( $opt_u =~ m@^http://@ ? $opt_u : "http://${opt_u}" );
my $ua = LWP::UserAgent->new;
$ua->agent("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.7) Gecko/20060909 Firefox/1.5.0.7");
$ua->proxy('http' => $proxy);
 
my $req = HTTP::Request->new('GET',$opt_u);
$req->header('x-wte-msisdn'    => '8475716752');
$req->header('accept' => 'text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5');
$req->header('accept-encoding' => 'gzip,deflate');
$req->header('accept-language' => 'en');
$req->header('cache-control'   => 'no-cache');
$req->header('connection'      => 'close');

my $res;
eval {
    local $SIG{ALRM} = sub { die "critical timeout" };
    alarm $crit_time + 1;
    eval {
      $start_epoch = time;
      # send request
      $res = $ua->request($req);
    };
    alarm 0;
};
alarm 0;
my $eval_result = $@;
my $latency;
nagios_unknown ($eval_result, $latency)      if $eval_result && $eval_result !~ /critical timeout/;
nagios_critical($eval_result, $latency)      if $eval_result && $eval_result =~ /critical timeout/;
$latency =  convert_to_epoch( $res->header('client-date') ) - $start_epoch;
nagios_critical("", $latency)                if ($latency > $crit_time);
nagios_warning ("", $latency)                if ($latency > $warn_time);
nagios_unknown ($res->status_line, $latency) if ( ! $res->is_success );
nagios_ok      ($res->status_line, $latency);
